#ifndef MBTL_PACK_H
#define MBTL_PACK_H

#include <cstdio>
#include <cinttypes>

static const char ENTRY_KEY[] = {
    0xD0, 0x50, 0x25, 0x99, 0x94, 0x0B, 0x20, 0x61, 0x54, 0xCA, 0x25, 0xCC, 0xE6, 0xDE, 0xD2, 0x4E,
    0xF5, 0xAA, 0xB4, 0x48, 0xE2, 0xC2, 0x09, 0xB4, 0xA1, 0xBC, 0xB6, 0x12, 0x95, 0xF9, 0xEE, 0xDE,
    0x15, 0x0B, 0x49, 0x5D, 0x27, 0x69, 0xAF, 0xE9, 0x8B, 0x67, 0x78, 0x88, 0xFC, 0x65, 0xD1, 0xC4,
    0xB2, 0x46, 0x62, 0xB7, 0x2B, 0x24, 0x2E, 0x66, 0x2B, 0x41, 0xBA, 0x50, 0x02, 0x41, 0x71, 0x46,
    0x0D, 0x97, 0x47, 0x7C, 0x7F, 0x3E, 0x9D, 0xE1, 0x61, 0xA9, 0x64, 0xAC, 0xD8, 0xFC, 0x86, 0x37,
    0xA7, 0x7C, 0x81, 0x11, 0xF4, 0x44, 0x55, 0x4F, 0x4F, 0x3B, 0xA1, 0x22, 0xF0, 0x42, 0x09, 0xAF,
    0x40, 0xB2, 0xDA, 0x1A, 0x9C, 0x05, 0xF1, 0xE4, 0x55, 0xD3, 0xD9, 0x78, 0xFB, 0x01, 0x33, 0x00,
    0xDB, 0x35, 0x5B, 0x7D, 0xC6, 0x8C, 0x48, 0x17, 0x14, 0x90, 0xB4, 0xB1, 0xE9, 0x64, 0x7D, 0xC1,
    0xB7, 0x42, 0x4C, 0x5F, 0x04, 0x28, 0x74, 0x9C, 0x6E, 0xCD, 0x1D, 0x14, 0xEC, 0xDA, 0xA1, 0xC7,
    0x56, 0x57, 0x36, 0x24, 0x28, 0x63, 0xCE, 0x67, 0x83, 0x29, 0x3B, 0x25, 0x74, 0x0F, 0x97, 0x25,
    0x79, 0x30, 0xE3, 0x72, 0x41, 0x0D, 0xEE, 0xAE, 0xB4, 0x7F, 0x78, 0xA9, 0x33, 0xF1, 0x98, 0x33,
    0x21, 0xCB, 0x5B, 0x2E, 0xA2, 0x31, 0xAE, 0xE7, 0xA2, 0xEE, 0x7E, 0xA6, 0x1A, 0xAB, 0x1D, 0x83,
    0x8E, 0x65, 0xE8, 0x7C, 0xDB, 0x1E, 0x27, 0xC5, 0x2F, 0xD2, 0x34, 0x5F, 0x59, 0xAC, 0xE0, 0xEC,
    0x43, 0x7A, 0x12, 0xC2, 0xBC, 0x5F, 0xB1, 0x3E, 0x7B, 0xC7, 0xC4, 0x5A, 0x61, 0xA0, 0xD8, 0x82,
    0xFF, 0xC8, 0xA2, 0xA4, 0x58, 0xC1, 0xE6, 0x87, 0xE8, 0xAC, 0x98, 0x5D, 0xE5, 0x75, 0x40, 0x9B,
    0xC4, 0x4B, 0xA3, 0x08, 0xFF, 0x53, 0x9F, 0x14, 0x16, 0x9D, 0x57, 0x6C, 0xD4, 0x57, 0x90, 0xCB,
    0xD3, 0x40, 0x5B, 0x13, 0x42, 0x60, 0xF5, 0x9C, 0xE6, 0xF7, 0xEB, 0xCC, 0x5F, 0xB3, 0x81, 0xE8,
    0xAD, 0x25, 0x55, 0x29, 0xF2, 0x76, 0x40, 0x13, 0x79, 0x56, 0x7D, 0x02, 0xF8, 0x36, 0x0D, 0x06,
    0x12, 0xB7, 0x59, 0xF0, 0x20, 0x62, 0x1A, 0xAD, 0x31, 0x99, 0x76, 0xD3, 0x4F, 0xCD, 0x6B, 0x7A,
    0x05, 0xF2, 0x71, 0x4D, 0x1E, 0x30, 0x5B, 0xE1, 0xAE, 0xDC, 0x7F, 0x45, 0x57, 0xA6, 0x16, 0xDA,
    0xC5, 0x14, 0xE6, 0x64, 0x7B, 0x2F, 0x1E, 0x62, 0xD2, 0x7C, 0x81, 0x9B, 0x3E, 0x2D, 0xC6, 0xFA,
    0xD4, 0x99, 0x3F, 0x9B, 0x09, 0xEA, 0xBA, 0x26, 0xBD, 0x15, 0xA5, 0x5C, 0x78, 0x10, 0x75, 0xEF,
    0xF3, 0x3F, 0x48, 0x97, 0xDA, 0x2F, 0xC8, 0x62, 0xD0, 0x86, 0x53, 0x4C, 0xB4, 0x3A, 0x5A, 0x0F,
    0x22, 0x02, 0x07, 0x3C, 0x3D, 0x0A, 0x23, 0x8B, 0xAC, 0xEB, 0x36, 0x6F, 0xE3, 0xDA, 0xF0, 0xEE,
    0xA4, 0x1F, 0xC7, 0xB0, 0xC5, 0xCA, 0xE2, 0x56, 0x33, 0xA1, 0x36, 0x0D, 0x37, 0x5C, 0xEF, 0x62,
    0xF8, 0x15, 0x11, 0x58, 0x42, 0xFA, 0x5F, 0xB7, 0x85, 0x45, 0x7C, 0xA8, 0x21, 0x6E, 0x50, 0x7F,
    0xE0, 0x9E, 0xAD, 0xD8, 0xC4, 0x68, 0x32, 0xE5, 0x04, 0xB4, 0x70, 0x06, 0x51, 0xFB, 0x4C, 0x9A,
    0x5D, 0xBA, 0xA4, 0x16, 0x9E, 0x20, 0x36, 0x54, 0x50, 0x0A, 0xBD, 0x2D, 0xB9, 0x32, 0x5C, 0x49,
    0xB0, 0xA3, 0x40, 0x36, 0x60, 0x71, 0x82, 0xB8, 0x4A, 0xA6, 0x4A, 0x60, 0x89, 0x7F, 0x3A, 0x60,
    0x5A, 0xD9, 0x0A, 0x9E, 0xDB, 0xE6, 0x6F, 0x07, 0x13, 0x24, 0x42, 0x26, 0x33, 0x90, 0xDE, 0xF5,
    0x1B, 0x17, 0xCA, 0xF3, 0x20, 0x4D, 0x98, 0x76, 0x0D, 0x61, 0x0C, 0x43, 0x67, 0x51, 0x81, 0x5C,
    0xF6, 0x5A, 0x89, 0x19, 0x80, 0xB3, 0xD4, 0x7A, 0xD8, 0x7A, 0x53, 0xBC, 0x18, 0xEF, 0x9C, 0x2A,
    0x2A, 0xE0, 0x91, 0x36, 0x8D, 0x64, 0x3C, 0xC8, 0x55, 0xCC, 0xFE, 0xD6, 0x74, 0xD7, 0xE9, 0x35,
    0x39, 0x25, 0x6A, 0xAF, 0x16, 0xEE, 0x2B, 0x55, 0xA6, 0xF4, 0x37, 0x16, 0xEE, 0xB6, 0x60, 0x91,
    0xE4, 0xE7, 0xDE, 0x28, 0x2D, 0x1E, 0x38, 0x56, 0x2B, 0xCF, 0x68, 0x42, 0x37, 0x7A, 0x3A, 0x94,
    0x2B, 0x22, 0xF5, 0x87, 0x24, 0x01, 0x3D, 0x3F, 0x86, 0x7A, 0x38, 0x5E, 0x40, 0x4F, 0xF0, 0xD2,
    0x51, 0x14, 0xF8, 0xF0, 0x8B, 0xE4, 0x53, 0xC7, 0x96, 0x52, 0x91, 0xAE, 0x39, 0xA2, 0x3B, 0x20,
    0xD5, 0x3A, 0x71, 0xCA, 0x32, 0x53, 0xD2, 0xE1, 0x7E, 0xF4, 0x9C, 0xB9, 0x93, 0x21, 0x14, 0x94,
    0x79, 0x50, 0x29, 0xB8, 0x2C, 0x1C, 0x54, 0xC4, 0x9F, 0x3D, 0xC2, 0x43, 0x00, 0xB8, 0xB5, 0x82,
    0x3E, 0x53, 0x28, 0x9F, 0xC9, 0x4C, 0xB2, 0xE3, 0x99, 0x4A, 0xAC, 0x51, 0x71, 0x94, 0x96, 0x7F,
    0x65, 0x81, 0xB7, 0xA5, 0x9A, 0x30, 0x04, 0xF4, 0x4D, 0x78, 0x43, 0x29, 0x16, 0x22, 0x70, 0x61,
    0x6E, 0x56, 0x60, 0x2F, 0x70, 0x54, 0xA4, 0xEC, 0xDC, 0x65, 0xB0, 0x4E, 0x61, 0x10, 0x3D, 0x3C,
    0x1C, 0x90, 0xEB, 0xE1, 0x5C, 0x86, 0x2B, 0x00, 0xA8, 0xEC, 0x5C, 0x87, 0x03, 0x4A, 0x34, 0x66,
    0x6E, 0x2C, 0x62, 0xA1, 0xAF, 0xD3, 0x71, 0xA4, 0x51, 0x2B, 0xF0, 0xD8, 0xEC, 0xFD, 0xD0, 0x73,
    0xA6, 0x66, 0x0D, 0x94, 0xFA, 0x88, 0x91, 0x8F, 0xB8, 0x7F, 0x55, 0x85, 0x4D, 0x96, 0xC9, 0x39,
    0x45, 0xBB, 0x76, 0x1E, 0x0E, 0x31, 0xE1, 0xB5, 0xFF, 0x85, 0xB3, 0x15, 0x98, 0xC3, 0x18, 0xCB,
    0x0C, 0xE9, 0x65, 0xE5, 0xFC, 0x9C, 0xFD, 0x4A, 0x86, 0x1A, 0x75, 0x4D, 0x7E, 0x70, 0xF6, 0x81,
    0xFB, 0xED, 0xE3, 0xCE, 0x16, 0xD6, 0xBC, 0xC4, 0xEE, 0x5B, 0x43, 0x30, 0xF0, 0xCA, 0xDD, 0xED,
    0x55, 0x03, 0x3A, 0xFD, 0xEB, 0x2C, 0x38, 0xD8, 0x19, 0xA6, 0x05, 0x04, 0x1D, 0x3F, 0x84, 0xE6,
    0x99, 0xA9, 0xF3, 0xD8, 0x4E, 0x2B, 0xCA, 0x7C, 0x27, 0x96, 0xE6, 0x4F, 0x79, 0x7B, 0xE6, 0x81,
    0x89, 0x9B, 0xD6, 0x04, 0x4F, 0x9F, 0x0B, 0xE3, 0x79, 0x09, 0x4D, 0xD5, 0xB3, 0x6B, 0x3C, 0x12,
    0x26, 0xD6, 0xEC, 0x65, 0x3E, 0x96, 0xD3, 0x82, 0xB1, 0x1C, 0xE5, 0x9B, 0xBD, 0x3C, 0xFD, 0x2E,
    0xB1, 0x99, 0x7F, 0x21, 0xAE, 0x5D, 0x3B, 0x10, 0xAF, 0x2D, 0x95, 0xE6, 0xC7, 0x5C, 0xE3, 0xAA,
    0xAA, 0x5E, 0x17, 0x9C, 0x6F, 0x80, 0x9E, 0x81, 0x94, 0xD7, 0x88, 0x3B, 0x43, 0x76, 0xE8, 0x9C,
    0xD3, 0xE4, 0x7E, 0x7C, 0x92, 0xCE, 0x93, 0x09, 0xC2, 0xF8, 0x25, 0x5F, 0xE1, 0x79, 0x44, 0x59,
    0x2E, 0x28, 0xBC, 0xA6, 0x68, 0x52, 0xF4, 0x1F, 0xD9, 0xAE, 0x16, 0x57, 0x93, 0x92, 0x70, 0x74,
    0xFA, 0x66, 0x1B, 0x3E, 0x82, 0x5A, 0xDA, 0x76, 0xBA, 0x54, 0x44, 0x69, 0x8A, 0x2C, 0x26, 0xC5,
    0xB8, 0x1C, 0x23, 0xAA, 0xB1, 0x72, 0x9D, 0x04, 0x87, 0x88, 0xD9, 0x19, 0x36, 0xF6, 0x5D, 0x5E,
    0x2B, 0x06, 0x9D, 0x8F, 0x07, 0x69, 0xD7, 0xFE, 0xA0, 0x28, 0x3C, 0x2C, 0x48, 0xDD, 0x50, 0x96,
    0x53, 0x22, 0x93, 0xD1, 0xD3, 0x4A, 0x61, 0xD9, 0xA6, 0x4F, 0x17, 0xA7, 0xB3, 0x0C, 0x77, 0x01,
    0x70, 0xAC, 0x4E, 0x96, 0xA8, 0x63, 0x53, 0x4A, 0x7B, 0x5C, 0x53, 0xCF, 0xA6, 0xF2, 0x8B, 0x75,
    0x04, 0x22, 0x56, 0x43, 0x55, 0x40, 0x08, 0x46, 0x3F, 0xEA, 0x19, 0x29, 0x92, 0x3B, 0x86, 0x06,
    0xD0, 0x40, 0x74, 0x7C, 0xED, 0xB0, 0x16, 0x02, 0x53, 0xD7, 0xD2, 0x7A, 0x29, 0xD4, 0x9F, 0x0A,
    0xD5, 0x04, 0xB2, 0x27, 0xBF, 0xBE, 0x59, 0xF2, 0x58, 0x41, 0x27, 0xC8, 0x5C, 0xEA, 0x51, 0x14
};

static const char SUB_KEY[] = {
    0x7C, 0x7E, 0x0B, 0x98, 0x81, 0x88, 0xDE, 0x8D, 0x9B, 0x8C, 0x17, 0x4F, 0x4D, 0xD4, 0x6B, 0x12,
    0x08, 0xD8, 0x00, 0xB3, 0x44, 0x03, 0x22, 0x9F, 0xCF, 0xBA, 0x37, 0xF1, 0x64, 0x9B, 0xF5, 0xDA,
    0x7F, 0x02, 0xD2, 0x46, 0x70, 0xD2, 0xBC, 0xBC, 0xAE, 0x72, 0x0B, 0x86, 0x6F, 0x15, 0xB4, 0x13,
    0x75, 0x3F, 0xBF, 0x99, 0x2B, 0x85, 0xFB, 0xFE, 0xF0, 0x94, 0xF0, 0xF9, 0xB3, 0x74, 0x15, 0x75,
    0xC0, 0x0E, 0x43, 0x36, 0xD9, 0xEC, 0x6A, 0xBE, 0x89, 0x41, 0x83, 0x72, 0xB5, 0x29, 0xC5, 0xF9,
    0x74, 0x31, 0x1C, 0xE5, 0x21, 0x1A, 0xD7, 0x95, 0xAE, 0xDA, 0xA0, 0x59, 0x3A, 0xE4, 0xB2, 0xD8,
    0xE6, 0xA9, 0x46, 0xAF, 0xE5, 0x5F, 0x4E, 0x5B, 0xD3, 0x01, 0x66, 0x59, 0x48, 0x97, 0x08, 0x8B,
    0xAC, 0xB7, 0xFF, 0xDE, 0x4D, 0x4C, 0x1E, 0x2A, 0xAE, 0x96, 0x31, 0x5A, 0x23, 0x72, 0x34, 0xCC,
    0x9A, 0xDC, 0xC3, 0xFB, 0xBC, 0xB2, 0xD2, 0x5B, 0x35, 0xBA, 0x9E, 0x84, 0x4F, 0xE7, 0xE3, 0x93,
    0xC6, 0xD8, 0x50, 0xCD, 0xD8, 0xA2, 0x38, 0x86, 0x9B, 0xCF, 0x8A, 0x42, 0x93, 0xA7, 0x03, 0x19,
    0x84, 0xAE, 0xA2, 0x60, 0x85, 0x6D, 0x5D, 0x85, 0x56, 0x75, 0x12, 0x3B, 0xF3, 0xA2, 0xC0, 0xD7,
    0x69, 0x9D, 0xF7, 0xFA, 0xE9, 0xA4, 0x8D, 0x71, 0x1B, 0x8E, 0x93, 0x59, 0xB4, 0x09, 0x87, 0x87,
    0x4B, 0x27, 0xCB, 0x27, 0x69, 0x19, 0x56, 0xA2, 0xDF, 0x3A, 0xAA, 0xC6, 0x5C, 0x4F, 0x06, 0x21,
    0x3E, 0x0C, 0xDC, 0xAD, 0xA9, 0xDB, 0x85, 0xB3, 0xD6, 0xDA, 0x34, 0xE9, 0xAE, 0x22, 0x29, 0xDD,
    0x98, 0x4F, 0x27, 0x97, 0x8F, 0x3D, 0x27, 0x7A, 0x77, 0x0F, 0x4E, 0x6C, 0xB1, 0x76, 0x1D, 0x37,
    0xED, 0x30, 0xE8, 0x2E, 0x3F, 0xCE, 0x89, 0x13, 0x76, 0xBB, 0x55, 0x38, 0xA9, 0x7A, 0x4F, 0xE5,
    0x12, 0x2F, 0x9C, 0xFA, 0x1F, 0x61, 0x37, 0xD5, 0xC7, 0xFE, 0xE6, 0x76, 0x1B, 0x9F, 0x6D, 0xE1,
    0x1D, 0x0E, 0x01, 0xC4, 0xD4, 0x06, 0xFF, 0x5A, 0xA0, 0x39, 0xDE, 0x8F, 0xCC, 0x97, 0x63, 0x65,
    0x62, 0xCE, 0x13, 0x96, 0x43, 0x0D, 0xEE, 0x7B, 0x76, 0x0E, 0x5A, 0x2C, 0xC1, 0x53, 0x5E, 0xE9,
    0x76, 0xB0, 0x10, 0xB9, 0x90, 0x09, 0x51, 0x50, 0xFE, 0x5D, 0xB7, 0x36, 0x3F, 0x03, 0xCB, 0x26,
    0x2F, 0x34, 0x75, 0xB5, 0x21, 0xCA, 0xB4, 0x34, 0x2D, 0x47, 0x92, 0xD6, 0xCC, 0x19, 0x58, 0x16,
    0xA2, 0x1D, 0xFE, 0x53, 0x9A, 0x61, 0xE5, 0xBD, 0x38, 0x2E, 0xC9, 0x75, 0x2B, 0x46, 0xF1, 0xF0,
    0x22, 0x6A, 0xA8, 0x9D, 0xE1, 0x1F, 0xF1, 0xC7, 0x94, 0xB2, 0x77, 0xBC, 0x63, 0x7A, 0xC3, 0x2F,
    0x46, 0x5D, 0xB1, 0xDB, 0x1B, 0x95, 0x25, 0x69, 0xF6, 0xB4, 0xFA, 0x94, 0xB8, 0xE6, 0x3B, 0x8B,
    0xE3, 0x77, 0x96, 0x96, 0xAC, 0x95, 0x0D, 0xFD, 0x52, 0x56, 0xEF, 0x26, 0xAF, 0xFD, 0x07, 0xFD,
    0x0D, 0x79, 0x13, 0x98, 0x3A, 0x2E, 0x78, 0x1C, 0xDF, 0xF8, 0x33, 0xDA, 0x0D, 0x6D, 0x13, 0xBE,
    0x19, 0x63, 0x25, 0xEA, 0xAA, 0xB3, 0x70, 0x9E, 0x10, 0x3C, 0xE3, 0x5B, 0xD7, 0x2A, 0x8C, 0x48,
    0x9C, 0x78, 0x0B, 0xD4, 0x20, 0xB3, 0x45, 0x9D, 0x9B, 0x01, 0x5D, 0x91, 0x53, 0x63, 0xE0, 0x52,
    0x6C, 0x37, 0x3F, 0xDF, 0x02, 0x01, 0x83, 0x72, 0x75, 0x6A, 0x3C, 0xA4, 0x04, 0x89, 0xBA, 0xD7,
    0x9E, 0x62, 0x80, 0xD5, 0xF4, 0xAC, 0xF6, 0xB5, 0xD3, 0xD8, 0x5E, 0xFF, 0xB1, 0x4E, 0x09, 0x10,
    0x86, 0xFA, 0xCB, 0xBF, 0xDD, 0x07, 0xAC, 0x40, 0x2A, 0xEA, 0xE0, 0x49, 0x5E, 0xA3, 0xFA, 0x74,
    0xB9, 0x3F, 0x5C, 0xE5, 0xDF, 0xA2, 0xF2, 0x2C, 0x2F, 0x83, 0x20, 0x6C, 0x50, 0xB8, 0xF8, 0xBD
};
class MBTL_Pack {
private:
	FILE		*m_file;

	struct FolderIndex {
		unsigned int pos;
		unsigned int file_start_id;
		unsigned int size;
		unsigned char filename[256];
	};
	struct FileIndex {
		unsigned int pos;
		unsigned int unknown;
		unsigned int size;
		unsigned char filename[32];
	};

	FolderIndex	*m_folder_index;
	unsigned int	m_folder_count;

	unsigned int	m_data_folder_id;

	unsigned int	m_data_start;

	unsigned int	m_xor_key;

	FileIndex	*m_file_index;
	int		m_file_count;
public:
	bool		open_pack(const char *filename);
	void		close_pack();

  bool		read_file(const char *filename, char **dest, unsigned int *size, int fsize, int offset);

			MBTL_Pack();
			~MBTL_Pack();
};

#endif
